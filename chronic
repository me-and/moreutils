#!/usr/bin/perl

=head1 NAME

chronic - runs a command quietly unless it fails

=head1 SYNOPSIS

chronic [-ev] COMMAND...

=head1 DESCRIPTION

chronic runs a command, and arranges for its standard out and standard
error to only be displayed if the command fails (exits nonzero or crashes).
If the command succeeds, any extraneous output will be hidden.

A common use for chronic is for running a cron job. Rather than
trying to keep the command quiet, and having to deal with mails containing
accidental output when it succeeds, and not verbose enough output when it
fails, you can just run it verbosely always, and use chronic to hide
the successful output.

	0    1 * * * chronic backup # instead of backup >/dev/null 2>&1
	*/20 * * * * chronic -ve my_script # verbose for debugging

=head1 OPTIONS

=over 4

=item -v

Verbose output (distinguishes between STDOUT and STDERR, also reports RETVAL)

=item -e

Stderr triggering. Triggers output when stderr output length is non-zero.
Without -e chronic needs non-zero return value to trigger output.

In this mode, chronic's return value will be C<2> if the command's return
value is C<0> but the command printed to stderr.

=back

=head1 AUTHOR

Copyright 2010 by Joey Hess <id@joeyh.name>

Original concept and "chronic" name by Chuck Houpt.
Code for verbose and stderr trigger by Tomas 'Harvie' Mudrunka 2016.

Licensed under the GNU GPL version 2 or higher.

=cut

use warnings;
use strict;
use IPC::Run qw( start pump finish timeout );
use Getopt::Std;

our $opt_e = 0;
our $opt_n = 0;
our $opt_v = 0;
getopts('env'); # only looks at options before the COMMAND

if (! @ARGV) {
	die "usage: chronic COMMAND...\n";
}

my ($out, $err);
my $h = IPC::Run::start \@ARGV, \*STDIN, \$out, \$err;
$h->finish;
my $ret=$h->full_result;

if ($ret >> 8) { # child failed
	$ret = ($ret >> 8);
}
elsif ($ret != 0) { # child killed by signal
	$ret = 1;
}
elsif ($opt_e && (length($err) > 0)) {
	$ret = 2;
}
else {
	$ret = 0;
}

if (($ret && ! $opt_n) || (! $ret && $opt_n)) {
	showout();
}

exit $ret;

sub showout {
	print "STDOUT:\n" if $opt_v;
	print STDOUT $out;
	STDOUT->flush();
	print "\nSTDERR:\n" if $opt_v;
	print STDERR $err;
	STDERR->flush();
	print "\nRETVAL: ".($ret >> 8)."\n" if $opt_v;
}
